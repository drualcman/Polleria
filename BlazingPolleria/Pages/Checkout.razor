@page "/checkout"
@using BlazingPizza.Services
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="main">
    <EditForm EditContext=editContext OnValidSubmit=PlaceOrder>
      <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Revisar pedido</h4>
            <OrderReview Order="Order" />
        </div>

        <div class="checkout-delivery-address">
            <h4>Entregar a...</h4>
                @if (isError)
                {
                    <div class="alert alert-danger">Por favor ingrese un nombre y una dirección.</div>
                }
            <AddressEditor Address="Order.DeliveryAddress" />
        </div>
      </div>

        <button class="checkout-button btn btn-warning" type="Submit" disabled=@isError>
        Realizar pedido
      </button>
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;

    bool isError = false;
    bool isSubmitting;

    private async Task CheckSubmission(EditContext editContext)
    {
        isSubmitting = true;
        var model = editContext.Model as Address;
        isError = string.IsNullOrWhiteSpace(model?.Name)
            || string.IsNullOrWhiteSpace(model?.Line1)
            || string.IsNullOrWhiteSpace(model?.PostalCode);
        if (!isError)
        {
            await PlaceOrder();
        }
        isSubmitting = false;
    }

    async Task PlaceOrder()
    {
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }

    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new(Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }
    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}

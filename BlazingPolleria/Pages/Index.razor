@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@inject IJSRuntime JavaScript
@inject NavigationManager NavigationManager

<div class="main">
    <!-- Botón personalizado -->
    <div class="filter-section">
        <button @onclick="ToggleOrderByPrice" class="custom-button">@buttonText</button>
    </div>

    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in orderedSpecials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pollo="OrderState.ConfiguringPollo"
                          OnCancel="OrderState.CancelConfigurePizzaDialog"
                          OnConfirm="OrderState.ConfirmConfigurePolloDialog" />
}

<div class="sidebar">
    @if (order.Pollos.Any())
    {
        <div class="order-contents">
            <h2>Su pedido</h2>

            @foreach (var configuredPollo in order.Pollos)
            {
                <div class="cart-item">
                    <div class="title">@configuredPollo.Special.Name</div>
                    <ul>
                    @foreach (var topping in configuredPollo.Toppings)
                    {
                        <li>+ @topping.Topping.Name</li>
                    }
                    </ul>
                    <div class="item-price">
                        S/.@configuredPollo.GetFormattedTotalPrice()
                    </div>
                    <button type="button" class="close text-danger" aria-label="Close"
                            @onclick="@(async () => await RemovePolloConfirmation(configuredPollo))">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Elija un pollo<br>para comenzar</div>
    }

    <div class="order-total @(order.Pollos.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderState.Order.Pollos.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Hacer pedido >
        </a>
    </div>
</div>

@code {
    List<PolloSpecial> specials = new();
    List<PolloSpecial> orderedSpecials = new();
    bool isAscending = true;
    string buttonText = "Ordenar de mayor a menor - viceverza";
    Order order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PolloSpecial>>(NavigationManager.BaseUri + "specials");
        orderedSpecials = specials.OrderByDescending(special => special.BasePrice).ToList();
    }

    async Task RemovePolloConfirmation(Pollo removePollo)
    {
        var messageParams = new
        {
            title = "¿Eliminar Pollo?",
            text = $"""¿Quieres eliminar la "{removePollo.Special!.Name}" de tu pedido?""",
            icon = "warning",
            buttons = new
            {
                abort = new { text = "No, déjalo en mi pedido.", value = false },
                confirm = new { text = "Si, quitar el pollo", value = true }
            },
            dangerMode = true
        };

        if (await JavaScript.InvokeAsync<bool>("swal", messageParams))
        {
            OrderState.RemoveConfiguredPollo(removePollo);
        }
    }

    private void ToggleOrderByPrice()
    {
        if (isAscending)
        {
            orderedSpecials = specials.OrderBy(special => special.BasePrice).ToList();
            buttonText = "Mostrar desde las más caras";
        }
        else
        {
            orderedSpecials = specials.OrderByDescending(special => special.BasePrice).ToList();
            buttonText = "Mostrar desde las más económicas";
        }

        isAscending = !isAscending;
    }
}
